--FOR THIS PROJECT WE ARE GOING TO USE THE NASHVILLE HOUSING DATA
--AND PERFORM SOME DATA CLEANING 

SELECT *
FROM Nashville_Housing

--STANDARDIZE DATE FORMAT

UPDATE Nashville_Housing
SET SaleDate = CONVERT(Date, SaleDate)

--POPULATE ADDRESS DATA

SELECT *
FROM Nashville_Housing
WHERE PropertyAddress IS NULL

--AS WE CAN SEE THERE ARE NULL VALUES INTO OUR DATASET
--BUT WE WANT TO POPULATE THOSE ROWS 

SELECT *
FROM Nashville_Housing
ORDER BY ParcelID

--WE CAN SEE THAT THERE ARE PROPERTIES WITH THE SAME PARCELID THAT HAVE THE SAME PROPERTY ADDRESS
--WHAT WE CAN DO IS USE THIS PARCELID AS A REFERENCE TO POPULATE THE PROPERTY ADDRESS COLUMN

SELECT t1.ParcelID, t1.PropertyAddress, t2.ParcelID, t2.PropertyAddress
FROM Nashville_Housing t1
JOIN Nashville_Housing t2
ON t1.ParcelID = t2. ParcelID 
AND t1.UniqueID <> t2.UniqueID
WHERE t1.PropertyAddress IS NULL

--NOW WE HAVE ALL THE ROWS WITH NULL VALUES AND THE ROWS WITH THE SAME PARCELID THAT HAVE AN ADDRESS

UPDATE t1
SET PropertyAddress = ISNULL(t1.PropertyAddress, t2.PropertyAddress)
FROM Nashville_Housing t1
JOIN Nashville_Housing t2
ON t1.ParcelID = t2. ParcelID 
AND t1.UniqueID <> t2.UniqueID
WHERE t1.PropertyAddress IS NULL

--NOW THERE ARE NO NULL VALUES INTO THE PROPERTY ADDRESS COLUMN

--BREAKING THE ADDRESS INTO INDIVIDUAL COLLUMNS (ADDRESS, CITY, STATE)

--WE SPLIT THE ADDRESS AND CITY PARTS FROM THE PROPERTY ADDRESS COLUMN

SELECT 
SUBSTRING(PropertyAddress, 1, CHARINDEX(',', PropertyAddress) -1) AS Address, 
SUBSTRING(PropertyAddress, CHARINDEX(',', PropertyAddress) +1, LEN(PropertyAddress)) AS City
FROM Nashville_Housing

--WE ARE CREATING TWO NEW COLUMNS AND INSERT THE NEW DATA 

ALTER TABLE Nashville_Housing
ADD Address nvarchar(255)

ALTER TABLE Nashville_Housing
ADD City nvarchar(255)

UPDATE Nashville_Housing
SET Address = SUBSTRING(PropertyAddress, 1, CHARINDEX(',', PropertyAddress) -1)

UPDATE Nashville_Housing
SET City = SUBSTRING(PropertyAddress, CHARINDEX(',', PropertyAddress) +1, LEN(PropertyAddress))

--SUBSTRING() AS A FUNCTION IS USED TO SPLIT A STRING AND RETURN A CERTAIN PART OF IT
--WHILE CHARINDEX() RETURNS A NUMBER WHICH IS THE INDEX OF A CERTAIN CHARACTER IN THE STRING
--LEN() RETURNS THE LENGTH OF THE STRING

--NOW WE WILL DO THE SAME FOR THE OWNER ADDRESS COLLUMN BUT ON A DIFFERENT WAY

SELECT 
PARSENAME(REPLACE(OwnerAddress,',','.'),3) AS OwnAddress,
PARSENAME(REPLACE(OwnerAddress,',','.'),2) AS OwnCity,
PARSENAME(REPLACE(OwnerAddress,',','.'),1) AS OwnState
FROM Nashville_Housing

--PARSENAME() SPLITS A STRING INTO PARTS AND RETURNS A CERTAIN PART BACK
--BUT IT USES (.) AS A REFERENCE POINT SO WE USE REPLACE() TO REPLACE (,) WITH (.)

--WE NOW AGAIN ARE CREATING TWO NEW COLUMNS AND INSERT THE NEW DATA 

ALTER TABLE Nashville_Housing
ADD OwnAddress nvarchar(255)

ALTER TABLE Nashville_Housing
ADD OwnCity nvarchar(255)

ALTER TABLE Nashville_Housing
ADD OwnState nvarchar(255)

UPDATE Nashville_Housing
SET OwnAddress = PARSENAME(REPLACE(OwnerAddress,',','.'),3)

UPDATE Nashville_Housing
SET OwnCity = PARSENAME(REPLACE(OwnerAddress,',','.'),2)

UPDATE Nashville_Housing
SET OwnState = PARSENAME(REPLACE(OwnerAddress,',','.'),1)


--REPLACE 0 AND 1 WITH YES OR NO IN THE SOLD AS VACANT COLUMN
--FIRST OF ALL THE COLUMN'S DATATYPE IS BIT
--WE ARE GOING TO CHANGE THAT TO NVARCHAR

ALTER TABLE Nashville_Housing
ALTER COLUMN SoldAsVacant nvarchar(50)

--NOW WE REPLACE THOSE VALUES USING CASE

SELECT SoldAsVacant,
CASE WHEN SoldAsVacant = '0' THEN 'No'
     WHEN SoldAsVacant = '1' THEN 'Yes'
	 ELSE SoldAsVacant
END
FROM Nashville_Housing

UPDATE Nashville_Housing
SET SoldAsVacant = 
CASE WHEN SoldAsVacant = '0' THEN 'No'
     WHEN SoldAsVacant = '1' THEN 'Yes'
	 ELSE SoldAsVacant
END

--REMOVE DUPLICATES

--I AM AGAINST REMOVING OR DELETING VALUES FROM THE DATABASE AS IT CAN CREATE SERIOUS PROBLEMS AND RESULT TO THE LOSS OF IMPORTANT DATA
--WE CAN EXTRACT OUR RAW DATA FIRST AND THEN USE TOOLS SUCH AS PYTHON AND NOTEBOOKS IF WE WANT TO FILTER OUR DATA AND DO SOME DATA WRANGLING
--THIS IS FOR ILLUSTRATION PURPOSES ONLY AS IT IS A PORTFOLIO PROJECT

--WE ARE GOING TO PARTITION OUR DATASET BY COLUMNS THAT SHOULD CONTAIN ROWS WITH UNIQUE DATA
--WE USE ALSO ROW_NUMBER() TO HELP US IDENTIFY ROWS WITH DUPLICATES


WITH Row_Num AS(
SELECT *,
ROW_NUMBER() OVER(
PARTITION BY ParcelID,
             PropertyAddress,
			 SaleDate,
			 SalePrice,
			 LegalReference
ORDER BY UniqueID) AS row_num
FROM Nashville_Housing
)
DELETE
FROM Row_Num 
WHERE row_num > 1

--WE HAD 104 ROWS WITH DUPLICATE DATA WICH WE THEN DELETED

--DELETE UNUSED COLUMNS (AGAIN NOT RECOMMENDEN AND IS FOR ILLUSTRATION PURPOSES ONLY) 

ALTER TABLE Nashville_Housing
DROP COLUMN PropertyAddress, OwnerAddress, TaxDistrict 

--NOW WE CAN CHECK THE FINAL RESULT

SELECT *
FROM Nashville_Housing

--*PLACEHOLDER FOR MORE QUERIES IN THE FUTURE*